Lambda Expression VS Method Reference:
    when using lambda there is an extra indirection layer,
    th compiler create a private static method that take the 
    argument and execute the body of the lambda.
    Method Reference: the code invoke the method directly

// Get a Taste of Lambdas and Get Addicted to Streams by Venkat Subramaniam
If when u write lambda expression, the compiler translate it into  anonymous inner object. it will create a .class file for each expression making our jar file bigger. producing more garabge for the garbage collection. 
so Java use DYNAMICINVOKE(u can attach and detach to the function u want to invoke dynamically. and u can reattach it as well at the runtime[function pointer]). to allow lamabda expression. which is written first in JAVA 7 to the dynamic-typed lang on the JVM to execute faster. they re-write it in the JAVA 8 to introduce the lambda expression in java.

Polymorphism : u can tell what to do. but u can vary the implementation based on the actual type of the object

lambdas are glue code : http://blog.agiledeveloper.com/2015/06/lambdas-are-glue-code.html

when the parameter became argument -> use a method reference.
if u will use method-reference for more than one parameter. the order of them must be the same.
limitation in method-reference: 1- u can't use them if u do any manipulation on the data 2- u can't use them if there is a conflict between static mrthod & instance method.
