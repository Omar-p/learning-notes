usage: 
    crosscutting functionality:
        Logging.
        Security.
        convert checked exceptions to runtime exceptions.
        caching.
        transaction.
    Tweaking a legacy application that need to improve.

AOP
  aspect represent the modularization of a concern that cuts
    across multiple classes.
  joinpoint: where aspect will be applied.
  advice: action that will be applied by the aspect at particular joinpoint.
    @Before|@After advice.
  chain of advices: multiple aspect for a single joincut
  pointcut: predicate expression that match join point.
  
  -Target object: object that advised by one or more aspect. 
    spring aop will a create a runtime proxy for the target 
    object in order to add the aspects to the execution.
  -Introduction: declare additional methods or fields for a given class.
    spring aop allow that adviced object recieves new interface to implement.
     [adding additional behavior to a class at runtime] 
  -Proxy: created by aop to add aspect in the execution
   2 ways:
     standard mechanism:
       - JDK Dynamic proxy
     CGLIB
       - code generation library proxy.
  -weaving: the operation of program transformation that applies the aspect to  
    the target object in order to create the advised object.
    - Spring Aop prefer weaving at runtime 

  ** Aop proxy and weaving
      Aspect program <---[Aspect Specification]
                    ----->                  Aspect Weaver --> Modified Code.
      Base Code   ---
Spring Aop implements aspects using regular classes,
    the schema-based approach or regular classes annotated with 
     the @Aspect -> AsspectL approach.

     ProceedingJoinPoint#[proceed]

     spring create [className]Proxy
       create the same methods but wrapping them into ProceedingJoinPoint that execute the
         original method in proceed method

JDK Dynamic proxy
    . if the target class is implementing any interface spring create a proxy 
      that implement the same interface to be able to substitute.
CGLIB
    . if the target doesn't implements any class the proxy will extend the target class.

if the target class is final the spring cannot use CGLIB, and if the target contains any
  final methods the we cannot override its behavior and make use of advices for that method.


aspect annotation will help us avoiding naming conventions.

@AfterThrowing

----
XSD