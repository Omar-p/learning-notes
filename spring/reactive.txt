Reactive System.
  . using reactive lib or style doesn't make sys reactive
    to make system reactive:
     . Responsive [Resilient, Scalable]  
     . Messages [vs events. msg go to explicit destination].
Reactive Programming.
  . Event driven and focus on Data flow
    Events propagate changes, forming a stream of data that is
     propagated to everyone listening to those changes. 
  . Non-blocking , Asynchronous, Functional/Declarative.
  . when we have one ubiquitous abstraction, one consistent type, 
    that's at the core of our code, then we can reuse threads, we get 2 other benefits:
     - one abstraction to deal with different data, so if we want to pull data [], it just a reactive stream no need for adapters or code glue.
     - we have single place to introduce supporrt for robust APIs, 
       [retries, circuit breaking, backpressure] are built in this core-api,

  --------
   - implied cost of moving to microservices, what the complexities of moving communication to the wire ?
     . we need now to think more about threads, instead of just spin up more instances, to reduce cost of scaling
  - RSocket: protocol designed by engs in netflix and then went to meta, a protocol that reifies the concept 
      of reactive programming on the wire. it make it real so that u can build services that have back pressure 
        in them as part of the protocol itself, not just an afterthought.
  - every single ui could result in a cascade of network calls. that u don't have to deal with.
      before, one ui could easily equal one http call or one svc call.
  - microservices in netflix way, u extract out or erdicate any svc state
     so sure u've state, but that svc state is pushed back to a Scalable data tier 
       as best as possible. netflix use cassandra. and each svc is stateless HTTP service.
        and just scale out all svc horizontally behind a LB.

        - with reactive we can do better,  
            using blocking API, threads most of the time is idle waiting for other svc to respond.
    - when u subscribe, subscription happen in different threads, no gurantee the subscription will be in the same thread
     . so when u want to do things in some order, use operator then

     . tailable cursors [similar to continous query]: mongodb give u publisher type and as soon as data is available it push it to u.
       to do that u need to start mongo in replicated set mode,

       @Tailable
       methodInRepo 
     https://www.baeldung.com/spring-data-mongodb-tailable-cursors#tailable-cursors
  -----

Reactive Web App adopt non-blocking servers, generally based 
  on the event loop model.

things that limit servers from working like that is
 Servlet API because it's a blocking API. there 's an non-blocking
 one started form version +3.1.

Asynchronous Programming in java using callback may reach us
 to callback hell when u nest more than 2 callbacks and ur code start
 to be repeatitive and hard to read.

 u may use ThreadPool, Fork/Join, CompletableFuture
  but using CompletableFuture in wrong way may lead to 
  blocking code. 

 we use publisher/subscriber model.

 JavaStreamAPI vs ReactiveStream
  1- connect to a source and pull value from it and can be used only once.
  2- value pushed to pipeline of operators when u subscribe to the publisher. [backpressure]
---
spring mvc 
  . servlet api, blocking api, synchronous, one request per thread.
spring webflux
  . Reactive stream, Non-Blocking API (servlet 3.1+), Asynchronous,
      use event model where many concurrent connections use a few #of threads
----
Reactive Streams 
 provide a contract for [Asynchronous, backpressure, Non-Blocking]
   only concerned with the stream of data , it doesn't specify how the data can be manipulated or transformed.

  to simulate try-catch we have onErrorResume we can return a default mono
. Publisher
. Subscriber.
. Subscription
. Processor
when subscriber sub to pub a Subscription obj is created and it's passed to onSubscribe method
  ---
  Flux.from[Iterable, Array, List]

  Flux.interval generate num in another thread so if u don't wait program will exit

  Flux.concat start publishing the firest until it is finished then start publishing the second
  Flux.merge interleaving them
    both work on different thread.
  zip wait for all sources to emit one element and combine them until any of the sources complete.
----------
For the report Drragon feature, we will be using AWS step functions, AWS Lambda, and Amazon Simple Notification Service or SNS to create an asynchronous Dragon reporting system. This reporting process is asynchronous because we need to do some backend data validation that could take some time, and we don't want people waiting on an immediate response. Instead, we alert the user when the process has completed. This is a good example to show you how to set up a workflow that would kick off want to request hits your API. Then your backend would do whatever work needs to be done and return the response when it's ready via SMS. This is known as request off loading. And it allows you to respond to your client without the entire process having finished yet.

AWS step functions. 
-------------------
ServerWebExchange: 
 . container for http req and res, req and session attributes, and other related properties ..
   . ServerHttpRequest . ServerHttpResponse. reactive version of res and req.

     Method arguments with reactive support:
       . WebSession
       . Principal
       . @RequestBody
       . HttpEntity -> access request headers
       . @RequestPart to access part in a multipart/form-data request.
----
then()
 allow the first pub to complete 
    and then execute the pub it receive.
  then(no or mono), thenMany(no or mono or flux)

----
no subscribe in controller spring will call it  for u at the right time.
---
- Functional Web Endpoints:
  WebMvc.fn 5.2
  WebFlux.fn 5.0
    . if mono -> flatMap Mono to ServerResponse
    . if flux -> set it to body.
    route()
      .GET("products")
      .POST("products") we have a duplication so u can go for
        route()
        .Path("products", Builder)  <- like @RequestMapping() on controller and then append to it on method level.
  
  Router Function Builder:
    . Nesting . Resources . Router function built using builder.
  Predicates:
    . METHOD, HEADERS, ACCEPT, PATH, QUERY PARAMETER, Composition(or and )
  Exception handler: onError()
Handler Function 
  . take arg of ServerRequest and return Mono<T extends ServerResponse>
Router function
  . delegate handling of request to handler func .
  . most cases we don't write it we use : RouterFunctions.route(RequestPredicate, HandlerFunction)
    RequestPredicate : match against [Content-type|Method|pattern]
    . evaluated in order.
    . set more specific route before more general one.
----
WebTestClient:
  . bindToController
  . bindToRouterFunction
  . bindToApplicationContext
  . bindToServer
  exchange() not retrieve() to access to the whole response not the body only.
  if response has no body u can make sure exchange().expectBody(Void.class); or .isEmpty()

--
if I not use flatMp i will get a stream of stream