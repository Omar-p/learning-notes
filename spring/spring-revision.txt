  if we set properties file in the same path with the jar of our app, it 
  will override the properties file that is inside the jar.


----------------------------------------------------------------
Core:
  Aop:
    - based on simple predicate[all method in package, all method with specific return datatype..] we invoke some methods. Around | Before | After 
    - before ProceedingJoinPoint we can for example start transaction, check some condition, log the operation...
    - capture the return data of invocation.
    - After it we can close the transaction for example ...
    - u can do the same without AOP by extending the class. and adding the logic u want. but Aop do it in more convenient way.
    - useful when u want to execute methods on objects. [cross cutting concerns between objects]
  Servlet Filter:
    - implements javax.servlet.Filter
    -----------------------------------------------------------------------------

	        
  -------------------------------------------------------		
Data:
  Transaction:
    ts management ensure data consistency and integrity.
      - global ts: Multiple resources manage the transactions[managed by app server allowing for access to multiple resources(message queue, db..)]
      - local ts:  one resource manage the transaction[jdbc connection]
      
      -Programmatic: Developers writes custom code to manage transactions and set boundaries.
      -Declarative: separate transaction managemnt from business code.
      - LEVELS [DEFAULT(underlying DBMS), READ_UNCOMMITED, READ_COMMITED, REPEATABLE_READ, SERIALIZABLE]
  - when we add @Repository to any bean, spring automatically translate all JDBC exceptions to Spring Specific Exception    

-----
Integration:
  endpoints pass messages[header+payload] via channels:
    - Adapters(connect ur channel to some other system)
    - Filter(remove some messages from channels based on header, content, etc.)
    - Transformer (convert a message content or structure)
    - Enricher (add content to the message header or payload)
    - Service activator (invoke service operation based on the arrival of a message)
    - Gateway (connect your channels without SI coupling)
 Message Channels
  - 2 General classifications of message channels
    - Pollable Channel
    - Subscribable Channel
    
  - Pollable Channel:
    - May buffer its messages
      - Require a queue to hold the message
      - the queue has a designated capacity
    - Waits for the consumer to get the messages
      - consumers actively poll to recieve msgs.
    - Typically a Point-to-Point Channel
      - Only one reciever of a message in the channel,
    - Usually used for sending information or "document" message between endpoints      
  - Subscribable Channel
     Allows multiple subscribers (or consumers) to register for its messages.
       Messages are delivered to all registered subscribers on message arrival
       It has to manage a list or registry of subscribers.
    Doesn’t buffer its messages
    Usually used for “event” messages
      Notifying the subscribers that something happened and to take appropriate action.   
  -----
  Adapters
    An endpoint that connects a channel to an external system.
      - it "provide the bridge between integration framework and the external
         systems and service"
      - Providing separation of the messaging concerns from the transports and 
        protocols used
    Adapter are inbound or outbound 
      - Those that bring messages into the SI channels.
      - Those that get msg from SI channels to the outside app, db, etc.
    Built-in Adapter
      File, JMS, JDBC & JPA, FTP, FEED RSS, MAIL ADAPTER,..             
----------
TEST
 @DataJpaTest
   - by default, each test method runs in its own transaction, which is rolled back after 
     the method has executed. This way, the database state stays pristine between tests and 
     the tests stay independent of each other.      
  - @TestPropertySource(properties = {
        "spring.jpa.hibernate.ddl-auto=validate"
    })
-----------------------
Data:
  RowMapper: When each row of a ResultSet maps to a domain Object, 
   can be implemented as private inner class.

  RowCallbackHandler: When no value is being returned from callback 
    method for each row, e.g. writing row to a file, converting rows 
    to a XML, Filtering rows before adding to collection. Very efficient 
    as ResultSet to Object mapping is not done here.
 
  ResultSetExtractor: When multiple rows of ResultSet map to a single Object.
   Like when doing complex joins in a query one may need to have access to entire 
   ResultSet instead of single row of rs to build complex Object and you want to take 
   full control of ResultSet. Like Mapping the rows returned from the join of TABLE1 and TABLE2 
   to an fully-reconstituted TABLE aggregate.

  ParameterizedRowMapper is used to create complex objects

  #show bin value:
    logging.level.org.hibernate.orm.jdbc.bind=trace
  #
   spring.jpa.properties.jakarta.persistence. 
   spring.jpa.properties.jakarta.persistence.schema-generation.scripts.action=drop-and-create 
   #spring.jpa.properties.jakarta.persistence.schema-generation.scripts.create-source=metadata
   #spring.jpa.properties.jakarta.persistence.schema-generation.scripts.drop-target=drop-and-create.sql
   #spring.jpa.properties.jakarta.persistence.schema-generation.scripts.create-target=drop-and-create.sql
  
   a file named import.sql in the root of the classpath is executed on startup if Hibernate creates 
     the schema from scratch (that is, if the ddl-auto property is set to create or create-drop)

  Spring Boot processes the schema-${platform}.sql and data-${platform}.sql files (if present),
    where platform is the value of spring.datasource.platform. This allows you to switch to
     database-specific scripts if necessary. For example, you might choose to set it to the vendor
      name of the database (hsqldb, h2, oracle, mysql, postgresql, and so on).
  
  PageRequest describe the desired page of data.
     - zero based
     - Sort describe how to sort req data.
  Page<> - an interface describing the result of a paged query 
    - content, num, size, sort info.
    - util methods to get previous and next.

  spring data rest /collectionName/search/methodNameInRestRepo?param=

-----
Transaction: a unit of works
  - ACID
Save Point: programatic point u can set, which allow u to rollback to (ir rollback part of a transaction).

Database Locks:
  - the db will lock records, (in some cases whole table or db) to prevent other processes from changing data.
    - ACID compliance
  - Within a transaction the following DML statements will lock records of the  affected rows:
     - SELECT FOR UPDATE; UPDATE; DELETE.
  - During the transactions other sessions attempting to modify locked records will by default
     wait for the lock to be released. (ie interactively it will seem like things are hanging)
  - Deadlock - occur where two transactions lock each other and can never complete.
     - Both fail and roll  back
  JPA LOCKING:
    - Pessimistic LOCKING[used if the data is frequently updated]
       - Database mechanism are used to lock records for updates
       - Capabilities vary widely depending on db and version of JDBC driver used.
       - Simplest version is "SELECT FOR Update.." Locks ro or rows until commit or rollback is issued.
    - Optimistic Locking 
      - Done by checking a version attribute of the entitiy.

  Multi-Request Conversations:
    - Occurs in web [form] app, or possibly RESTful too, where the update logic is over 
      one or more requests, thus leaving a larger window of time.
        - Pessimistic Locking is very fast, milliseconds. Will only protect against conflicts at write time.
        - Optimistic Locking provides a mechanism to detect stale data over a longer period of time (ie - multiple requests)

  • Pessimistic Lock Modes
    • PESSIMISTIC_READ - uses shared lock, prevents data from being updated or deleted
    • PESSIMISTIC_WRITE - uses exclusive lock, prevents data from being read (in some
       isolation levels), updated or deleted
    • PESSIMISTIC_FORCE_INCREMENT - uses exclusive lock, increments version property
       of entity
    • Most databases will support PESSIMISTIC_WRITE, this is the option you will typically use
       • Use PESSIMISTIC_FORCE_INCREMENT if entity has version property
       • Uses a version property, which is incremented with each update
       • Can be int, Integer, long, Long, short, Short, or java.sql.Timestamp
          • Most common to use is Integer
       • Prior to an update, Hibernate will read the corresponding database record. If the version
            does not match, an exception is thrown
    • Downsides:
       • Updates outside of JPA/Hibernate which do not update the version property will break this
      • Performance - read before each update

    JPA Optimistic Lock Modes
      • OPTIMISTIC - Obtains optimistic read lock for all entities with version attribute
      • OPTIMISTIC_FORCE_INCREMENT - Same at OPTIMISTIC, but in increments the version
         value
      • READ - JPA 1.x, same as OPTIMISTIC
      • WRITE - JPA 1.x, same as OPTIMISTIC_FORCE_INCREMENT

---------------
Boot:
  @SpringBootApplication annotated with:
    @SpringBootConfigurations <- specialization of Spring @Configuration
    @ComponentScan
    @EnableAutoConfiguration <- switch on spring boot intelligent 
        configuration based on classpath and configured properites.
   ---
   @ComponentScan
     search for components declared in the same package or any child of it.     
     
     @Compnent   
      specailized ones:
        @Configuration
        @Service
        @Repository
        @RestController
        @Controller
    
     - u don't have to use it in the app, we can declare all our
       components in a Configuration class using @Bean. if we don't
       like ComponentScan. we can use @Import in the configuration class
        to pull beans declaration from other classes or xml.
        
    ---
    spring boot use User configuration under @CompnentScan to add user beans then
     the @EnableAutoConfiguration add beans based on what defined in the classpath 
    @EnableAutoConfigurations   
      - get all classes defined in spring.factories, if there are conditional annotations
        on them then evaluate if all are true. spring will check the conditional annotations
        on the method of beans' definiation and register what are evaluated to true.
      - if our configurations depend on each other, we need to explicitly order them by 
        annotation (relatively is easily)   @AutoConfigureAfter(*.class) @AutoConfigureBefore()
         if u depend on one from other project u can specify string of the fully qualifiedName
           of that configuration

    @ConditionalOnMissingBean --> applied if there is no other bean definiation with
     the same type.
    
    class level @ConditionalOnClass([].class) configs applied if the class not in the classpath.
    
    
    spring-boot-configuration-processor
      - generates metadata about classes in your application that are 
        annotated with @ConfigurationProperties
      - looking for all classes annoted with ConfigurationProperties and provide 
       auto-completion for them in the properties file. 
       
   to register configurations to spring to load:
        src/main/resources/META-INF/spring.factories
         org.springframework.boot.autoconfigure.EnableAutoConfigurations=qulifiedClassName

   to get what match and what don't, run in --debug, or if u enable actuator:
     /autoconfig endpoint will give u the report for that.
-----
profiles: 

application-{profile name}.yml

@Profile({"!prod", "!qa"})
@Configuration
public class

Note that the spring.profiles.active property name contains the plural word pro-
files. This means you can specify more than one active profile.
spring:
  profiles:
    active:
     - prod
     - audit
     - ha    

@Profile("dev")


It involves placing profile-specific properties alongside nonprofiled properties in
application.yml, separated by three hyphens and the spring.profiles property to
name the profile.

properties fileName specified by properties [spring.config.name]

we can separate yaml properties file into section for different profiles:
  spring: config: activate: on-profile: [profile-name]
---
spring:
  profiles: prod
------------

  the @RestController annotation tells Spring that all handler methods in the 
  controller should have their return value written directly to the body of 
  the response, rather than being carried in the model to a view for rendering.
-----
DB connection pool:
  - default HikariCP
    - default pool size = 10
    - properties to configure
      spring.datasource.hikari.
      spring.datasource.hikari.data-source-properties[cachePrepStmts]

flyway migration
  - it's important to have a unique way to reproduce the database state [structre]
     because u may have different environment u want to run ur app in.
     - development and CI/CD db are easy, just rebuild each time.
     - QA,UAT,Production are permanent DB. considerations:
        .what state are they in?
        .Has a script been applied?
        .How to create a new database to a release?
  - store : version, checksum to the file, ...
  - properites:
     spring.flyway
------------------------
using interfaces:
  - we can hide the implementation of the bean behind an interface, and use the interface
    in the controller. this way we can change the implementation without changing the controller.
  - Allows for use of JDK Dynamic Proxies.
  
------------------------
- to invoke method after the constructor and all setters are called on a bean u can implement initializingBean
  and override afterPropertiesSet() method.
- BeanPostProcessor #postProcessBeforeInitialization and #postProcessAfterInitialization
  - postProcessBeforeInitialization method are called after calling constructor and setters but before calling  afterPropertiesSet.
- u can also register bean definiation by implementing BeanFactoryPostProcessor->BeanDefinitionPostProcessor and override 
   postProcessBeanDefinitionRegistry method.
---

<hr>

- in spring to inject config from properties file to config @PropertySource("classpath:app.properties")
- ApplicationRunner run() & CommandLineRunner run() will get executed, just after applicationcontext is created and before spring boot application startup.
  - difference in (String[] args) and (ApplicationArguments args)
- not use public by default and communicate between different packages using events & interfaces.
- WebServerInitializedEvent is published after the WebServer is ready.
- AvailabilityChangeEvent is published when the AvailabilityState of the application changes.
  - 
- u can publish an event when u update/insert a record in the db, and have a listener which update the cache.

- https://steeltoe.io/

----
- create ur own autoconfiguration:
  - https://stackoverflow.com/questions/75313425/unable-to-create-custom-spring-boot-starter-autoconfiguration
  - https://www.baeldung.com/spring-boot-custom-auto-configuration
  - https://www.baeldung.com/spring-boot-custom-starter
---

## @Controller :
- it's a sterotype annotation, which means it's a specialization of @Component.
- a compnent that set on the path between a request coming from external protocol {http, grqphql, soap, rsocket, ...} and your business logic.

<hr>

- u can implement ur own view View.

rest : data + consistent way to understand it.
- if u will give up all http rest features and u will couple the client with the server, then don't use rsocket to get the benefit of the performance.
  - use http with rest for open web, internally u can use rsocket to get the benefit of the performance.


---
- handlerAdapter
  - https://stackoverflow.com/a/19009601
# DispatcherServlet
- doDispatch method
  - check if the request is multipart
  - determine the handler for the request
    - if null -> noHandlerFound method
  ----
- RequestResponseBodyMethodProcessor
  - Resolves method arguments annotated with <br> @RequestBody and handles return values from methods annotated with @ResponseBody by reading  <br> and writing to the body of the request or response with an HttpMessageConverter.
    - writeWithMessageConverter match requested content type with compatible media-types.
    - iterate over the converters and find the first one that can write the response.