DI : It is a process whereby objects define their dependencies. only through constructor arguments, arguments to a factory method, or properties that are set on the object instance after it is constructed or returned from a factory method.

ApplicationContext is  a sub-interface of BeanFactory it adds:
        Easier integration with Spring’s AOP features, Message resource handling (for use in internationalization), Event publication, pplication-layer specific contexts such as the WebApplicationContext for use in web applications.
In short, the BeanFactory provides the configuration framework and basic functionality, and the ApplicationContext adds more enterprise-specific functionality. 

Beans, and the dependencies among them, are reflected in the configuration metadata used by a container.

The Spring IoC container itself is totally decoupled from the format in which this configuration metadata is actually written. These days, many developers choose Java-based configuration for their Spring applications.

The most flexible variant is GenericApplicationContext in combination with reader delegates — for example, with XmlBeanDefinitionReader for XML files, as the following example shows:
            GenericApplicationContext context = new GenericApplicationContext();
            new XmlBeanDefinitionReader(context).loadBeanDefinitions("services.xml", "daos.xml");
            context.refresh();